{"version":3,"sources":["img/logo.svg","img/video.webm","WeatherCard/WeatherCard.jsx","Dropdown/Dropdown.jsx","Header/Header.jsx","App.jsx","config.js","reportWebVitals.js","index.js"],"names":["WeatherCard","props","state","epoch","d","Date","parseInt","weekday","Array","month","getDay","getDate","getMonth","getFullYear","angle","Math","round","className","this","weatherData","daily","map","date","dt","weather","src","icon","alt","description","temp","day","feels_like","night","eve","morn","min","max","pressure","humidity","wind_speed","getCardinalDirection","wind_deg","React","Component","Dropdown","getSuggestions","value","a","inputValue","trim","toLowerCase","fetch","mode","response","json","data","getSuggestionValue","suggestion","Title","renderSuggestion","Poster","onChange","event","newValue","setState","onSuggestionsFetchRequested","then","Error","suggestions","Search","onSuggestionsClearRequested","handleChangeCity","selectedCity","inputProps","placeholder","Header","success","bind","options","enableHighAccuracy","timeout","maximumAge","position","handlePositionChange","err","console","warn","code","message","navigator","geolocation","getCurrentPosition","error","timezone","lat","lon","onClick","getLocation","WeatherApp","positionChange","loc","k","isLoadedWeather","isLoadedLocation","coords","latitude","longitude","forceUpdate","componentDidMount","res","id","autoPlay","loop","muted","video","type","logo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea5fda83.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.ea46f5ad.svg\";","export default __webpack_public_path__ + \"static/media/video.defbf1bb.webm\";","import React from \"react\";\r\nimport \"./weatherCard.css\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nexport class WeatherCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  componentDidUpdate() {}\r\n  date(epoch) {\r\n    let d = new Date(parseInt(epoch) * 1000);\r\n    const weekday = new Array(7);\r\n    weekday[0] = \"Sunday\";\r\n    weekday[1] = \"Monday\";\r\n    weekday[2] = \"Tuesday\";\r\n    weekday[3] = \"Wednesday\";\r\n    weekday[4] = \"Thursday\";\r\n    weekday[5] = \"Friday\";\r\n    weekday[6] = \"Saturday\";\r\n    const month = new Array(12);\r\n    month[0] = \"Jan\";\r\n    month[1] = \"Feb\";\r\n    month[2] = \"Mar\";\r\n    month[3] = \"Apr\";\r\n    month[4] = \"May\";\r\n    month[5] = \"Jun\";\r\n    month[6] = \"Jul\";\r\n    month[7] = \"Aug\";\r\n    month[8] = \"Sep\";\r\n    month[9] = \"Oct\";\r\n    month[10] = \"Nov\";\r\n    month[11] = \"Dec\";\r\n    return (\r\n      <div>\r\n        <div>{weekday[d.getDay()]}</div>\r\n        <div>\r\n          {d.getDate()}. {month[d.getMonth()]}. {d.getFullYear()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getCardinalDirection(angle) {\r\n    const directions = [\r\n      \"↑ N\",\r\n      \"↗ NE\",\r\n      \"→ E\",\r\n      \"↘ SE\",\r\n      \"↓ S\",\r\n      \"↙ SW\",\r\n      \"← W\",\r\n      \"↖ NW\",\r\n    ];\r\n    return directions[Math.round(angle / 45) % 8];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"cardWrapper\">\r\n        {this.props.weatherData.daily.map((daily) => {\r\n          return (\r\n            <div key={daily.dt} className=\"weatherCard\">\r\n              <div className=\"weatherCard weatherCard__front\">\r\n                <div>{this.date(daily.dt)}</div>\r\n                <content>\r\n                  <div>\r\n                    {daily.weather.map((weather) => {\r\n                      return (\r\n                        <div>\r\n                          <img\r\n                            src={`https://openweathermap.org/img/wn/${weather.icon}@2x.png`}\r\n                            className=\"weatherIcon__front\"\r\n                            alt={\"aaa\"}\r\n                          />\r\n                          <div>{weather.description}</div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  {daily.temp.day}°C\r\n                </content>\r\n              </div>\r\n              <div className=\"weatherCard weatherCard__back\">\r\n                <div>\r\n                  {daily.weather.map((weather) => {\r\n                    return (\r\n                      <div>\r\n                        <img\r\n                          src={`https://openweathermap.org/img/wn/${weather.icon}@2x.png`}\r\n                          className=\"weatherIcon__back\"\r\n                          alt={\"aaa\"}\r\n                        />\r\n                        <div>{this.date(daily.dt)} </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n                <div className=\"weatherCard__back-content\">\r\n                  <content>\r\n                    <div>\r\n                      <ul>\r\n                        <u>Temperature</u>\r\n                      </ul>\r\n                      <li>\r\n                        Day: {daily.temp.day}°C<br></br> - feels:{\" \"}\r\n                        {daily.feels_like.day}°C\r\n                      </li>\r\n                      <li>\r\n                        Night: {daily.temp.night}°C <br></br> - feels:{\" \"}\r\n                        {daily.feels_like.night}°C\r\n                      </li>\r\n                      <li>\r\n                        Evening: {daily.temp.eve}°C <br></br> - feels:{\" \"}\r\n                        {daily.feels_like.eve}\r\n                      </li>\r\n                      <li>\r\n                        Morning: {daily.temp.morn}°C <br></br> - feels:{\" \"}\r\n                        {daily.feels_like.morn}\r\n                      </li>\r\n                      <li>Minimum: {daily.temp.min}°C</li>\r\n                      <li>Maximum: {daily.temp.max}°C</li>\r\n                    </div>\r\n                    <div>\r\n                      <div>Pressure: {daily.pressure} hPa</div>\r\n                      <div>Humidity: {daily.humidity}%</div>\r\n                      <div>\r\n                        Wind: {daily.wind_speed}ms<sup>-1</sup> &nbsp;{\" \"}\r\n                        {this.getCardinalDirection(daily.wind_deg)}{\" \"}\r\n                      </div>\r\n                    </div>\r\n                  </content>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"./dropdown.css\";\r\n\r\nimport Autosuggest from \"react-autosuggest\";\r\n// import \"./dropdownConfig.json\";\r\n\r\n// const countryCityList = require(\"./dropdownConfig.json\");\r\n\r\n// let countriesList = [];\r\n// let cityList = [];\r\n// for (let i = 0; i <= countryCityList.countries.length - 1; i++) {\r\n//   countriesList[i] = {\r\n//     value: countryCityList.countries[i].country,\r\n//     label: countryCityList.countries[i].country,\r\n//   };\r\n//   for (let j = 0; j <= countryCityList.countries[i].states.length - 1; j++) {\r\n//     cityList[countryCityList.countries[i].country] =\r\n//       countryCityList.countries[i].states;\r\n//   }\r\n// }\r\n\r\nexport class Dropdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      suggestions: [],\r\n    };\r\n  }\r\n\r\n  getSuggestions = async (value) => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    let response = await fetch(\r\n      \"https://secure.geobytes.com/AutoCompleteCity?key=7c756203dbb38590a66e01a5a3e1ad96&q=\" +\r\n        inputValue,\r\n      { mode: \"no-cors\" }\r\n    );\r\n    let data = await response.json();\r\n    return data;\r\n  };\r\n\r\n  getSuggestionValue = (suggestion) => suggestion.Title;\r\n\r\n  renderSuggestion = (suggestion) => (\r\n    <span className=\"sugg-option\">\r\n      <span className=\"icon-wrap\">\r\n        <img src={suggestion.Poster} />\r\n      </span>\r\n      <span className=\"name\">{suggestion.Title}</span>\r\n    </span>\r\n  );\r\n\r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue,\r\n    });\r\n  };\r\n\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.getSuggestions(value).then((data) => {\r\n      if (data.Error) {\r\n        this.setState({\r\n          suggestions: [],\r\n        });\r\n      } else {\r\n        this.setState({\r\n          suggestions: data.Search,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: [],\r\n    });\r\n  };\r\n\r\n  handleChangeCity = (selectedCity) => {\r\n    this.setState({ selectedCity }, () => {});\r\n  };\r\n\r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n\r\n    // Option props\r\n    const inputProps = {\r\n      placeholder: \"Type location name\",\r\n      value,\r\n      onChange: this.onChange,\r\n    };\r\n\r\n    return (\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n        getSuggestionValue={this.getSuggestionValue}\r\n        renderSuggestion={this.renderSuggestion}\r\n        inputProps={inputProps}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\nimport { Dropdown } from \"../Dropdown/Dropdown.jsx\";\r\n\r\nexport class Header extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.success = this.success.bind(this);\r\n    this.state = {\r\n      options: {\r\n        enableHighAccuracy: true,\r\n        timeout: 5000,\r\n        maximumAge: 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  // success(position) {\r\n  //   this.setState((state) => {\r\n  //     return {\r\n  //       ...state,\r\n  //       lat: position.coords.latitude,\r\n  //       lon: position.coords.longitude,\r\n  //     };\r\n  //   });\r\n  // }\r\n  success(position) {\r\n    this.props.handlePositionChange(position);\r\n  }\r\n  error(err) {\r\n    console.warn(`ERROR(${err.code}): ${err.message}`);\r\n  }\r\n  getLocation() {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => this.success(position), // lambda !\r\n      (error) => this.error(error),\r\n      this.state.options\r\n    );\r\n  }\r\n\r\n  // onPositionChange(position) {\r\n  //   this.props.handlePositionChange({\r\n  //     lat: position.coords.latitude,\r\n  //     lon: position.coords.longitude,\r\n  //   });\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"headerWrapper\">\r\n        <div className=\"header\">\r\n          <div className=\"header header__front\">\r\n            <div>8-Day Weather Forecast</div>\r\n            <div>{this.props.weatherData.timezone}</div>\r\n            <div className=\"\">\r\n              Longitude: {this.props.lat}; Latitude:{this.props.lon}\r\n            </div>\r\n          </div>\r\n          <div className=\"header header__back\">\r\n            <button\r\n              onClick={() => {\r\n                this.getLocation();\r\n                // this.handleWeatherDataChange();\r\n              }}\r\n            >\r\n              Get forecast for my location\r\n            </button>\r\n            <p>Find place</p>\r\n            <Dropdown />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import logo from \"./img/logo.svg\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { AK } from \"./config.js\";\nimport video from \"./img/video.webm\";\nimport { WeatherCard } from \"./WeatherCard/WeatherCard.jsx\";\nimport { Header } from \"./Header/Header\";\n\nclass WeatherApp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.positionChange = this.positionChange.bind(this);\n\n    this.state = {\n      weatherData: [],\n      loc: \"eba2d4e00ab8a7f\",\n      lat: 0,\n      lon: 0,\n      k: AK,\n      isLoadedWeather: false,\n      isLoadedLocation: false,\n    };\n  }\n  // Position comming from header\n  positionChange(position) {\n    this.setState((state) => {\n      return {\n        ...state,\n        lat: position.coords.latitude,\n        lon: position.coords.longitude,\n      };\n    });\n    // console.log(\"position:\", position);\n    // console.log(\"coordionates: \", this.state.lat, this.state.lon);\n    // console.log(\"weather data: \", this.state.weatherData);\n\n    this.forceUpdate();\n    (() => {\n      this.componentDidMount();\n    })();\n  }\n\n  componentDidMount() {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.lat}&lon=${this.state.lon}&units=metric&exclude=current,minutely,hourly,alerts&appid=${this.state.loc}${this.state.k}`\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        this.setState((state) => {\n          // da se pazit na ova , ne go znaev prethodniot state --- vidi dokumnetacija\n          return {\n            ...state,\n            isLoadedWeather: true,\n            weatherData: json,\n          };\n        });\n      });\n  }\n\n  render() {\n    var { isLoadedWeather, weatherData, lon, lat } = this.state;\n    if (!isLoadedWeather) {\n      return <div>Loading...</div>;\n    } else {\n      // console.log(this.state.lat, this.state.lon);\n      return (\n        <div className=\"weatherApp\">\n          <div id=\"video\">\n            <video className=\"video\" autoPlay loop muted>\n              <source src={video} type=\"video/webm\" />\n              <source src={video} type=\"video/ogg\" />\n              Your browser does not support the video tag.\n            </video>\n          </div>\n          <div className=\"logo\">\n            <div>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </div>\n          </div>\n          <Header\n            weatherData={weatherData}\n            lat={lat}\n            lon={lon}\n            handlePositionChange={this.positionChange}\n          />\n          <WeatherCard\n            // onChange={this.onChange.bind(this)}\n            weatherData={weatherData}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default WeatherApp;\n","export const AK = '7cde55f9e3df656c5'","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}