{"version":3,"sources":["img/logo.svg","img/video.webm","App.jsx","config.js","reportWebVitals.js","index.js"],"names":["WeatherApp","props","state","weatherData","loc","lat","lon","k","isLoaded","fetch","this","then","res","json","setState","epoch","d","Date","parseInt","weekday","Array","month","getDay","getDate","getMonth","getFullYear","angle","Math","round","className","id","autoPlay","loop","muted","src","video","type","logo","alt","timezone","daily","map","date","dt","weather","icon","description","temp","day","feels_like","night","eve","morn","min","max","pressure","humidity","wind_speed","getCardinalDirection","wind_deg","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da4ec2b2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.ea46f5ad.svg\";","export default __webpack_public_path__ + \"static/media/video.defbf1bb.webm\";","import logo from './img/logo.svg';\nimport React from 'react';\nimport './App.css';\nimport { AK } from './config.js';\nimport video from './img/video.webm';\nimport './weatherCard.css'\n\nclass WeatherApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherData: [],\n      loc: 'eba2d4e00ab8a7f',\n      lat: 59.91273,\n      lon: 10.74609,\n      k: AK,\n      isLoaded: false,\n    }\n  }\n\n  componentDidMount() {\n    fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${this.state.lat}&lon=${this.state.lon}&units=metric&exclude=current,minutely,hourly,alerts&appid=${this.state.loc}${this.state.k}`)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          weatherData: json,\n        })\n      })\n  }\n\n  date(epoch) {\n    let d = new Date(parseInt(epoch) * 1000)\n    const weekday = new Array(7);\n    weekday[0] = \"Sunday\";\n    weekday[1] = \"Monday\";\n    weekday[2] = \"Tuesday\";\n    weekday[3] = \"Wednesday\";\n    weekday[4] = \"Thursday\";\n    weekday[5] = \"Friday\";\n    weekday[6] = \"Saturday\";\n    const month = new Array(12);\n    month[0] = \"Jan\";\n    month[1] = \"Feb\";\n    month[2] = \"Mar\";\n    month[3] = \"Apr\";\n    month[4] = \"May\";\n    month[5] = \"Jun\";\n    month[6] = \"Jul\";\n    month[7] = \"Aug\";\n    month[8] = \"Sep\";\n    month[9] = \"Oct\";\n    month[10] = \"Nov\";\n    month[11] = \"Dec\";\n    return (<div>\n      <p>{weekday[d.getDay()]}</p>\n      <p>{d.getDate()}. {month[d.getMonth()]}. {d.getFullYear()}</p>\n    </div>)\n  }\n\n  getCardinalDirection(angle) {\n    const directions = ['↑ N', '↗ NE', '→ E', '↘ SE', '↓ S', '↙ SW', '← W', '↖ NW'];\n    return directions[Math.round(angle / 45) % 8];\n  }\n\n  render() {\n    var { isLoaded, weatherData } = this.state;\n    if (!isLoaded) {\n      return <div>Loading...</div>;\n    }\n    else {\n      return (\n        <div className=\"weatherApp\" >\n          <div id=\"video\">\n            <video className=\"video\" autoPlay loop muted>\n              <source src={video} type=\"video/webm\" />\n              <source src={video} type=\"video/ogg\" />\n            Your browser does not support the video tag.\n          </video>\n          </div>\n          <div>\n            <header className=\"App-header\">\n              <div>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              </div>\n              <div className=\"title title_front\">\n                <p >8-Day Weather Forecast</p>\n                <p>{weatherData.timezone}</p>\n              </div>\n            </header>\n          </div>\n          <div className=\"cardWrapper\">\n            {weatherData.daily.map(daily => {\n              return (\n                <div key={daily.dt} className=\"weatherCard\" >\n                  <div className=\"weatherCard weatherCard__front\">\n                    <p>{this.date(daily.dt)}</p>\n                    <content>\n                      <div>{daily.weather.map(weather => {\n                        return (\n                          <div>\n                            <img src={`https://openweathermap.org/img/wn/${weather.icon}@2x.png`} className=\"weatherIcon\" alt={'aaa'} />\n                            <p>{weather.description}</p>\n                          </div>)\n                      })}\n                      </div>\n                      {daily.temp.day}°C\n                    </content>\n                  </div>\n                  <div className=\"weatherCard weatherCard__back\">\n                    <div>{daily.weather.map(weather => {\n                      return (\n                        <div>\n                          <img src={`https://openweathermap.org/img/wn/${weather.icon}@2x.png`} className=\"weatherIcon__back\" alt={'aaa'} />\n                          <p>{this.date(daily.dt)} </p>\n                        </div>\n                      )\n                    })}\n                    </div>\n                    <div className=\"weatherCard__back-content\">\n                      <content>\n                        <div>\n                          <ul><u>Temperature</u></ul>\n                          <li>Day: {daily.temp.day}°C<br></br> - feels: {daily.feels_like.day}°C</li>\n                          <li>Night: {daily.temp.night}°C <br></br> - feels: {daily.feels_like.night}°C</li>\n                          <li>Evening: {daily.temp.eve}°C <br></br> - feels: {daily.feels_like.eve}</li>\n                          <li>Morning: {daily.temp.morn}°C <br></br> - feels: {daily.feels_like.morn}</li>\n                          <li>Minimum: {daily.temp.min}°C</li>\n                          <li>Maximum: {daily.temp.max}°C</li>\n                        </div>\n                        <div>\n                          <p>Pressure: {daily.pressure} hPa</p>\n                          <p>Humidity: {daily.humidity}%</p>\n                          <p>Wind: {daily.wind_speed}ms<sup>-1</sup> &nbsp;  {this.getCardinalDirection(daily.wind_deg)} </p>\n                        </div>\n                      </content>\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </div >\n      );\n    }\n  }\n}\n\nexport default WeatherApp;\n","export const AK = '7cde55f9e3df656c5'","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}