[{"F:\\DEV\\REACT\\weather\\weather-app\\src\\index.js":"1","F:\\DEV\\REACT\\weather\\weather-app\\src\\reportWebVitals.js":"2","F:\\DEV\\REACT\\weather\\weather-app\\src\\App.jsx":"3","F:\\DEV\\REACT\\weather\\weather-app\\src\\config.js":"4","F:\\DEV\\REACT\\weather\\weather-app\\src\\WeatherCard\\WeatherCard.jsx":"5","F:\\DEV\\REACT\\weather\\weather-app\\src\\Header\\Header.jsx":"6","F:\\DEV\\REACT\\weather\\weather-app\\src\\Dropdown\\Dropdown.jsx":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1610977195164,"results":"10","hashOfConfig":"9"},{"size":2689,"mtime":1612460377970,"results":"11","hashOfConfig":"9"},{"size":37,"mtime":1610728663423,"results":"12","hashOfConfig":"9"},{"size":4586,"mtime":1612459182004,"results":"13","hashOfConfig":"9"},{"size":1956,"mtime":1612461081859,"results":"14","hashOfConfig":"9"},{"size":2682,"mtime":1612461141465,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1e6dhr6",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"F:\\DEV\\REACT\\weather\\weather-app\\src\\index.js",[],["33","34"],"F:\\DEV\\REACT\\weather\\weather-app\\src\\reportWebVitals.js",[],"F:\\DEV\\REACT\\weather\\weather-app\\src\\App.jsx",[],"F:\\DEV\\REACT\\weather\\weather-app\\src\\config.js",[],"F:\\DEV\\REACT\\weather\\weather-app\\src\\WeatherCard\\WeatherCard.jsx",["35"],"import React from \"react\";\r\nimport \"./weatherCard.css\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nexport class WeatherCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  componentDidUpdate() {}\r\n  date(epoch) {\r\n    let d = new Date(parseInt(epoch) * 1000);\r\n    const weekday = new Array(7);\r\n    weekday[0] = \"Sunday\";\r\n    weekday[1] = \"Monday\";\r\n    weekday[2] = \"Tuesday\";\r\n    weekday[3] = \"Wednesday\";\r\n    weekday[4] = \"Thursday\";\r\n    weekday[5] = \"Friday\";\r\n    weekday[6] = \"Saturday\";\r\n    const month = new Array(12);\r\n    month[0] = \"Jan\";\r\n    month[1] = \"Feb\";\r\n    month[2] = \"Mar\";\r\n    month[3] = \"Apr\";\r\n    month[4] = \"May\";\r\n    month[5] = \"Jun\";\r\n    month[6] = \"Jul\";\r\n    month[7] = \"Aug\";\r\n    month[8] = \"Sep\";\r\n    month[9] = \"Oct\";\r\n    month[10] = \"Nov\";\r\n    month[11] = \"Dec\";\r\n    return (\r\n      <div>\r\n        <div>{weekday[d.getDay()]}</div>\r\n        <div>\r\n          {d.getDate()}. {month[d.getMonth()]}. {d.getFullYear()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getCardinalDirection(angle) {\r\n    const directions = [\r\n      \"↑ N\",\r\n      \"↗ NE\",\r\n      \"→ E\",\r\n      \"↘ SE\",\r\n      \"↓ S\",\r\n      \"↙ SW\",\r\n      \"← W\",\r\n      \"↖ NW\",\r\n    ];\r\n    return directions[Math.round(angle / 45) % 8];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"cardWrapper\">\r\n        {this.props.weatherData.daily.map((daily) => {\r\n          return (\r\n            <div key={daily.dt} className=\"weatherCard\">\r\n              <div className=\"weatherCard weatherCard__front\">\r\n                <div>{this.date(daily.dt)}</div>\r\n                <content>\r\n                  <div>\r\n                    {daily.weather.map((weather) => {\r\n                      return (\r\n                        <div>\r\n                          <img\r\n                            src={`https://openweathermap.org/img/wn/${weather.icon}@2x.png`}\r\n                            className=\"weatherIcon__front\"\r\n                            alt={\"aaa\"}\r\n                          />\r\n                          <div>{weather.description}</div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                  {daily.temp.day}°C\r\n                </content>\r\n              </div>\r\n              <div className=\"weatherCard weatherCard__back\">\r\n                <div>\r\n                  {daily.weather.map((weather) => {\r\n                    return (\r\n                      <div>\r\n                        <img\r\n                          src={`https://openweathermap.org/img/wn/${weather.icon}@2x.png`}\r\n                          className=\"weatherIcon__back\"\r\n                          alt={\"aaa\"}\r\n                        />\r\n                        <div>{this.date(daily.dt)} </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n                <div className=\"weatherCard__back-content\">\r\n                  <content>\r\n                    <div>\r\n                      <ul>\r\n                        <u>Temperature</u>\r\n                      </ul>\r\n                      <li>\r\n                        Day: {daily.temp.day}°C<br></br> - feels:{\" \"}\r\n                        {daily.feels_like.day}°C\r\n                      </li>\r\n                      <li>\r\n                        Night: {daily.temp.night}°C <br></br> - feels:{\" \"}\r\n                        {daily.feels_like.night}°C\r\n                      </li>\r\n                      <li>\r\n                        Evening: {daily.temp.eve}°C <br></br> - feels:{\" \"}\r\n                        {daily.feels_like.eve}\r\n                      </li>\r\n                      <li>\r\n                        Morning: {daily.temp.morn}°C <br></br> - feels:{\" \"}\r\n                        {daily.feels_like.morn}\r\n                      </li>\r\n                      <li>Minimum: {daily.temp.min}°C</li>\r\n                      <li>Maximum: {daily.temp.max}°C</li>\r\n                    </div>\r\n                    <div>\r\n                      <div>Pressure: {daily.pressure} hPa</div>\r\n                      <div>Humidity: {daily.humidity}%</div>\r\n                      <div>\r\n                        Wind: {daily.wind_speed}ms<sup>-1</sup> &nbsp;{\" \"}\r\n                        {this.getCardinalDirection(daily.wind_deg)}{\" \"}\r\n                      </div>\r\n                    </div>\r\n                  </content>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","F:\\DEV\\REACT\\weather\\weather-app\\src\\Header\\Header.jsx",[],"F:\\DEV\\REACT\\weather\\weather-app\\src\\Dropdown\\Dropdown.jsx",["36"],"import React from \"react\";\r\n\r\nimport \"./dropdown.css\";\r\n\r\nimport Autosuggest from \"react-autosuggest\";\r\n// import \"./dropdownConfig.json\";\r\n\r\n// const countryCityList = require(\"./dropdownConfig.json\");\r\n\r\n// let countriesList = [];\r\n// let cityList = [];\r\n// for (let i = 0; i <= countryCityList.countries.length - 1; i++) {\r\n//   countriesList[i] = {\r\n//     value: countryCityList.countries[i].country,\r\n//     label: countryCityList.countries[i].country,\r\n//   };\r\n//   for (let j = 0; j <= countryCityList.countries[i].states.length - 1; j++) {\r\n//     cityList[countryCityList.countries[i].country] =\r\n//       countryCityList.countries[i].states;\r\n//   }\r\n// }\r\n\r\nexport class Dropdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n      suggestions: [],\r\n    };\r\n  }\r\n\r\n  getSuggestions = async (value) => {\r\n    const inputValue = value.trim().toLowerCase();\r\n    let response = await fetch(\r\n      \"https://secure.geobytes.com/AutoCompleteCity?key=7c756203dbb38590a66e01a5a3e1ad96&q=\" +\r\n        inputValue,\r\n      { mode: \"no-cors\" }\r\n    );\r\n    let data = await response.json();\r\n    return data;\r\n  };\r\n\r\n  getSuggestionValue = (suggestion) => suggestion.Title;\r\n\r\n  renderSuggestion = (suggestion) => (\r\n    <span className=\"sugg-option\">\r\n      <span className=\"icon-wrap\">\r\n        <img src={suggestion.Poster} />\r\n      </span>\r\n      <span className=\"name\">{suggestion.Title}</span>\r\n    </span>\r\n  );\r\n\r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue,\r\n    });\r\n  };\r\n\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.getSuggestions(value).then((data) => {\r\n      if (data.Error) {\r\n        this.setState({\r\n          suggestions: [],\r\n        });\r\n      } else {\r\n        this.setState({\r\n          suggestions: data.Search,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: [],\r\n    });\r\n  };\r\n\r\n  handleChangeCity = (selectedCity) => {\r\n    this.setState({ selectedCity }, () => {});\r\n  };\r\n\r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n\r\n    // Option props\r\n    const inputProps = {\r\n      placeholder: \"Type location name\",\r\n      value,\r\n      onChange: this.onChange,\r\n    };\r\n\r\n    return (\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n        getSuggestionValue={this.getSuggestionValue}\r\n        renderSuggestion={this.renderSuggestion}\r\n        inputProps={inputProps}\r\n      />\r\n    );\r\n  }\r\n}\r\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":3,"column":10,"nodeType":"43","messageId":"44","endLine":3,"endColumn":23},{"ruleId":"45","severity":1,"message":"46","line":48,"column":9,"nodeType":"47","endLine":48,"endColumn":40},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'CSSTransition' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]